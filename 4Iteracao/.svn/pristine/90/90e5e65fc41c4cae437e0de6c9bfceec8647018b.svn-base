package br.com.neolog.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.neolog.exceptions.EmptyCartException;
import br.com.neolog.exceptions.InvalidQuantityException;
import br.com.neolog.exceptions.ProductNotFoundException;
import br.com.neolog.exceptions.ProductNotInCartException;
import br.com.neolog.exceptions.ProductQuantityInsufficientException;
import br.com.neolog.pojo.CartItem;
import br.com.neolog.pojo.CartItemHolder;
import br.com.neolog.services.CartService;

@RequestMapping( "cart" )
@RestController
public class CartController
{
    private final CartService cartService;

    @Autowired
    public CartController(
        final CartService cartService )
    {
        this.cartService = cartService;
    }

    @PostMapping( value = "addtocart" )
    public ResponseEntity<List<CartItem>> addToCart(
        @RequestBody final CartItemHolder holderCodeQuantity )
        throws ProductNotFoundException,
            InvalidQuantityException,
            ProductQuantityInsufficientException
    {
        return ResponseEntity.ok( cartService.addToCart( holderCodeQuantity ) );
    }

    @PostMapping( value = "remove_quantity" )
    public ResponseEntity<String> removeFromCart(
        @RequestBody final CartItemHolder holderCodeQuantity )
        throws ProductNotInCartException,
            InvalidQuantityException
    {
        return ResponseEntity.ok( cartService.removeFromCart( holderCodeQuantity ) );
    }

    @PostMapping( value = "remove/{code}" )
    public ResponseEntity<String> removeFromCart(
        @PathVariable( "code" ) final String code )
        throws ProductNotInCartException
    {
        return ResponseEntity.ok( cartService.removeFromCart( code ) );
    }

    @GetMapping( value = "clear" )
    public ResponseEntity<Boolean> clearCart()
    {
        return ResponseEntity.ok( cartService.clearCart() );
    }

    @GetMapping( value = "show" )
    public ResponseEntity<String> showCart()
    {
        return ResponseEntity.ok( cartService.showCart() );
    }

    @GetMapping( value = "checkout" )
    public ResponseEntity<String> chekout()
        throws EmptyCartException
    {
        return ResponseEntity.ok( cartService.checkOut() );
    }

    @GetMapping( value = "cancel" )
    public ResponseEntity<Boolean> cancelcart()
    {
        return ResponseEntity.ok( cartService.cancelCart() );
    }

}

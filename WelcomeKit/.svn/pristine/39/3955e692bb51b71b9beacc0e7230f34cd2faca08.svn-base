package br.com.neolog.ecommerce.cart;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import com.google.common.base.Objects;

import br.com.neolog.ecommerce.product.Product;

@Entity
@Table( name = "cart_item" )
public class CartItem
{
    @Id
    @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "cart_item_sequence" )
    @SequenceGenerator( name = "cart_item_sequence", sequenceName = "cart_item_sequence", initialValue = 1, allocationSize = 1 )
    private Integer id;
    @NotNull
    @ManyToOne( fetch = FetchType.EAGER )
    @JoinColumn( name = "product", foreignKey = @ForeignKey( name = "fk_cartItem_product" ) )
    private Product product;
    private int quantity;
    @NotNull
    @ManyToOne( fetch = FetchType.EAGER )
    @JoinColumn( name = "cart", foreignKey = @ForeignKey( name = "fk_cartItem_cart" ) )
    private Cart cart;

    public CartItem()
    {
    }

    public CartItem(
        @NotNull final Product product,
        final int quantity,
        @NotNull final Cart cart )
    {
        this.product = product;
        this.quantity = quantity;
        this.cart = cart;
    }

    public Integer getId()
    {
        return id;
    }

    public Product getProduct()
    {
        return product;
    }

    public int getQuantity()
    {
        return quantity;
    }

    public void setQuantity(
        final int quantity )
    {
        this.quantity = quantity;
    }

    public Cart getCart()
    {
        return cart;
    }

    @Override
    public int hashCode()
    {
        return Objects.hashCode( getId() );
    }

    @Override
    public boolean equals(
        final Object obj )
    {

        if( this == obj ) {
            return true;
        }
        if( ! ( obj instanceof CartItem ) ) {
            return false;
        }
        final CartItem cartItem = (CartItem) obj;
        return Objects.equal( this.getId(), cartItem.getId() ) && Objects.equal( this.getCart(), cartItem.getCart() );

    }

}

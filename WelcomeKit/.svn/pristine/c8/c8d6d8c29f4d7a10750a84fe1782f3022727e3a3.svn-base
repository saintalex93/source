package br.com.neolog.ecommerce.optimization.solver;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.springframework.stereotype.Component;

import br.com.neolog.ecommerce.exceptions.ProblemNullException;
import br.com.neolog.ecommerce.optimization.Optimization;
import br.com.neolog.ecommerce.optimization.problem.Item;
import br.com.neolog.ecommerce.optimization.problem.Problem;
import br.com.neolog.ecommerce.optimization.solution.Solution;

@Component
public final class Bell
    implements
        Optimization
{

    @Override
    public Solution optimize(
        final Problem problem )
    {

        if( problem == null ) {
            throw new ProblemNullException();
        }

        if( problem.getProblemItems().size() < 1 ) {
            return Solution.empty();
        }

        final List<Item> listItems = sliceListItem( problem );
        final HolderBell holderBell = getBellArrayTarget( problem.getTarget(), listItems );
        final List<Integer> agglomerateListItem = getFeasibleValues( holderBell );
        final List<Item> solvedProblemItems = discoveryItemsByValue( agglomerateListItem, problem.getProblemItems() );
        return Solution.create( holderBell.getSolvedValue(), solvedProblemItems );
    }

    private HolderBell getBellArrayTarget(
        Long target,
        final List<Item> listItem )
    {
        target = target / 100;
        final int[][] bellArray = new int[ listItem.size() + 1 ][ target.intValue() + 1 ];

        for( int line = 0; line <= listItem.size(); line++ ) {
            for( int targetByCollumn = 0; targetByCollumn <= target; targetByCollumn++ ) {

                // Criação da primeira linha.
                if( line == 0 ) {
                    bellArray[ 0 ][ targetByCollumn ] = 0;
                    continue;
                }
                // Inserção do valor do produto na coluna zero.
                final Long itemValue = listItem.get( line - 1 ).getValue();
                if( targetByCollumn == 0 ) {
                    bellArray[ line ][ targetByCollumn ] = itemValue.intValue();
                    continue;
                }

                if( itemValue.intValue() > targetByCollumn ) {
                    final int superiorLineValue = bellArray[ line - 1 ][ targetByCollumn ];
                    bellArray[ line ][ targetByCollumn ] = maxBetween( 0, superiorLineValue );
                    continue;
                }

                // Factível
                final int modValue = Math.abs( targetByCollumn - itemValue.intValue() );
                if( modValue > 0 ) {

                    final int superiorValueItem = bellArray[ line - 1 ][ targetByCollumn ];
                    final int sumOfItemByUpperIndex = itemValue.intValue() + bellArray[ line - 1 ][ targetByCollumn - itemValue
                        .intValue() ];

                    bellArray[ line ][ targetByCollumn ] = maxBetween( sumOfItemByUpperIndex, superiorValueItem );
                } else {
                    final int superiorValueItem = bellArray[ line - 1 ][ targetByCollumn ];
                    bellArray[ line ][ targetByCollumn ] = maxBetween( itemValue.intValue(), superiorValueItem );
                }
            }
        }
        return HolderBell.create( bellArray[ listItem.size() ][ target.intValue() ], listItem.size(), target.intValue(), bellArray );
    }

    private List<Item> sliceListItem(
        final Problem problem )
    {
        final List<Item> slicedItems = new LinkedList<>();
        for( final Item item : problem.getProblemItems() ) {
            for( int i = 1; i <= item.getQuantity(); i++ ) {
                slicedItems.add( Item.create( item.getProductCode(), item.getValue() / 100, 1 ) );
            }
        }
        return slicedItems;
    }

    private List<Integer> getFeasibleValues(
        final HolderBell holderBell )
    {
        final List<Integer> feasibleValues = new ArrayList<>();
        final int[][] holderBellArray = holderBell.getBellArray();
        int column = holderBell.getMaxCollums();
        for( int line = holderBell.getMaxLines(); line > 0; line-- ) {
            for( ; column > 0; ) {
                final int targetValue = holderBellArray[ line ][ 0 ];
                // A linha 1 nunca vai ter comparação com a linha de cima, pois
                // é tudo algarismo zero.
                if( line != 1 && holderBellArray[ line ][ column ] != holderBellArray[ line - 1 ][ column ] ) {
                    feasibleValues.add( targetValue );
                    column = holderBellArray[ line ][ column ] - targetValue;
                    break;
                }
                // Apenas uma volta por linha;
                break;
            }
        }
        return feasibleValues;
    }

    private List<Item> discoveryItemsByValue(
        final List<Integer> feasibleItemValues,
        final List<Item> problemItems )
    {
        final ArrayList<Item> copiedProblemItems = new ArrayList<>( problemItems );
        final List<Item> separatedProblemItems = new LinkedList<>();

        for( int i = 0; i < feasibleItemValues.size(); i++ ) {
            for( final Item item : copiedProblemItems ) {
                final long valueBellItem = feasibleItemValues.get( i ) * 100;
                if( valueBellItem == item.getValue() ) {
                    separatedProblemItems.add( item );
                    copiedProblemItems.remove( item );
                    break;
                }
            }
        }
        return separatedProblemItems;
    }

    private int maxBetween(
        final int value,
        final int superiorValue )
    {
        return Integer.max( value, superiorValue );
    }

    private static class HolderBell
    {
        private int solvedValue;
        private int maxLines;
        private int maxCollums;
        private int[][] bellArray;

        public static HolderBell create(
            final int solvedValue,
            final int maxLines,
            final int maxCollums,
            final int[][] bellArray )
        {
            final HolderBell holderBell = new HolderBell();
            holderBell.solvedValue = solvedValue;
            holderBell.maxLines = maxLines;
            holderBell.maxCollums = maxCollums;
            holderBell.bellArray = bellArray;

            return holderBell;
        }

        public long getSolvedValue()
        {
            return solvedValue * 100;
        }

        public int getMaxCollums()
        {
            return maxCollums;
        }

        public int getMaxLines()
        {
            return maxLines;
        }

        public int[][] getBellArray()
        {
            return bellArray;
        }

    }

}

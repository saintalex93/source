package br.com.neolog.ecommerce.optimization.solver;

import java.util.LinkedList;
import java.util.List;

import org.springframework.stereotype.Component;

import br.com.neolog.ecommerce.optimization.Optimization;
import br.com.neolog.ecommerce.optimization.problem.Item;
import br.com.neolog.ecommerce.optimization.problem.Problem;
import br.com.neolog.ecommerce.optimization.solution.Solution;

@Component
public class Exact
    implements
        Optimization
{

    @Override
    public Solution optimize(
        final Problem problem )
    {
        final List<Item> preSolution = recursiveCombination( problem.getTarget(), problem.getProblemItems() );
        preSolution.removeIf( item -> item.getQuantity() == 0 );
        return Solution.create( getTotalValue( preSolution ), preSolution );
    }

    public List<Item> recursiveCombination(
        final long target,
        final List<Item> resolveItem )
    {
        final List<Item> separetedItems = new LinkedList<>( resolveItem );
        if( target <= 0 ) {
            return new LinkedList<>();
        }
        if( separetedItems.isEmpty() ) {
            return new LinkedList<>();
        }
        List<Item> bestResult = new LinkedList<>();
        for( final Item separetedItem : separetedItems ) {
            for( int quantity = 0; quantity <= separetedItem.getQuantity(); quantity++ ) {
                final long newTarget = target - quantity * separetedItem.getValue();
                List<Item> partialSolution = new LinkedList<>();
                if( target >= 0 && separetedItems.size() > 1 ) {
                    partialSolution = recursiveCombination( newTarget, separetedItems.subList( 1, separetedItems.size() ) );
                }
                partialSolution.add( generateItem( separetedItem, quantity ) );
                final long partialSolutionValue = getTotalValue( partialSolution );
                if( partialSolutionValue > getTotalValue( bestResult ) && partialSolutionValue <= target ) {
                    bestResult = partialSolution;
                }
            }
        }
        return bestResult;
    }

    private Item generateItem(
        final Item item,
        final int quantity )
    {
        return Item.create( item.getProductCode(), item.getValue(), quantity );
    }

    private long getTotalValue(
        final List<Item> list )
    {
        long totalValue = 0;
        for( final Item problemItem : list ) {
            totalValue += problemItem.getValue() * problemItem.getQuantity();
        }
        return totalValue;

    }
}

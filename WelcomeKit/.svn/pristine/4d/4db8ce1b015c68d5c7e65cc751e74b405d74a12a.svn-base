package br.com.neolog.ecommerce.stock;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import br.com.neolog.ecommerce.product.Product;
import br.com.neolog.ecommerce.product.ProductService;

@Component
public class StockService {

	@Autowired
	StockRepository repository;

	@Autowired
	ProductService productService;

	public List<Stock> getStock() {
		return repository.findAll();
	}

	public Stock getProductStock(final Product p) {
		return repository.findByProduct(p);
	}

	public Stock getProductStock(final int idProduct) {
		final Product objProduct = productService.getProductById(idProduct);
		return repository.findByProduct(objProduct);
	}

	public List<Stock> getActiveStock() {
		return repository.findByQuantityGreaterThan(0);
	}

	public List<Stock> getInactiveStock() {
		return repository.findByQuantityLessThan(0);
	}

	public Stock getMaxProduct() {
		return repository.maxProduct();
	}

	public Stock getMinProduct() {
		return repository.minProduct();
	}

	public Stock add(final int quantity, final int product) {
		final Product objProduct = productService.getProductById(product);
		return repository.save(new Stock(quantity, objProduct));

	}

	public Stock addStock(final int quantity, final int product) {
		final Product objProduct = productService.getProductById(product);
		final Stock objStock = getProductStock(objProduct);

		if (quantity + objStock.getQuantity() > Integer.MAX_VALUE) {
			throw new IllegalArgumentException("Quantidade informada é maior do que a permitida");
		}

		return repository.save(new Stock(objStock.getId(), quantity + objStock.getQuantity(), objProduct));

	}

	public Stock removeStock(final int quantity, final int product) {
		final Product objProduct = productService.getProductById(product);
		final Stock objStock = getProductStock(objProduct);

		if (quantity > objStock.getQuantity()) {
			throw new IllegalArgumentException("Quantidade informada é maior que estoque");
		}

		return repository.save(new Stock(objStock.getId(), objStock.getQuantity() - quantity, objProduct));

	}

}
